const express = require('express');
const fs = require('fs');
const path = require('path');
const pino = require("pino");
const {
    default: makeWASocket,
    useMultiFileAuthState,
    delay,
    makeCacheableSignalKeyStore,
    Browsers
} = require("@whiskeysockets/baileys");

const router = express.Router();

function generateId() {
    return Math.random().toString(36).substring(2, 15);
}

function removeFile(filePath) {
    if (!fs.existsSync(filePath)) return false;
    fs.rmSync(filePath, { recursive: true, force: true });
    return true;
}

function formatPhoneNumber(number) {
    let cleanNumber = number.replace(/\D/g, '');
    if (cleanNumber.startsWith('0')) {
        cleanNumber = '254' + cleanNumber.substring(1);
    }
    if (cleanNumber.length === 9) {
        cleanNumber = '254' + cleanNumber;
    }
    return cleanNumber;
}

const activeSessions = new Map();

// QR Code Endpoint
router.get('/qr', async (req, res) => {
    const sessionId = generateId();
    const tempDir = path.join(__dirname, 'temp', sessionId);
    fs.mkdirSync(tempDir, { recursive: true });

    try {
        const { state, saveCreds } = await useMultiFileAuthState(tempDir);

        const sock = makeWASocket({
            auth: {
                creds: state.creds,
                keys: makeCacheableSignalKeyStore(state.keys, pino({ level: "fatal" })),
            },
            printQRInTerminal: false,
            logger: pino({ level: "fatal" }),
            browser: Browsers.macOS("Safari")
        });

        activeSessions.set(sessionId, { sock, tempDir, createdAt: Date.now() });

        sock.ev.on("connection.update", async (update) => {
            const { connection, lastDisconnect, qr } = update;

            if (qr) {
                res.json({ success: true, qr: qr, sessionId: sessionId });
            }

            if (connection === "open") {
                await delay(2000);
                const credsPath = path.join(tempDir, 'creds.json');
                if (fs.existsSync(credsPath)) {
                    try {
                        const sessionData = fs.readFileSync(credsPath, 'utf8');
                        const base64Session = Buffer.from(sessionData).toString('base64');
                        const infinitySession = "INFINITY_" + base64Session;

                        const message = `🔐 *YOUR WHATSAPP SESSION ID* - INFINITE-XMD

*Session ID:*
\`\`\`
${infinitySession}
\`\`\`

*Generated:* ${new Date().toLocaleString()}

💻 Generated by Bevan Society`;

                        await sock.sendMessage(sock.user.id, { text: message });
                    } catch (error) {
                        console.error('Error:', error);
                    }
                }

                await delay(1000);
                await sock.ws.close();
                removeFile(tempDir);
                activeSessions.delete(sessionId);
            }
        });

        setTimeout(() => {
            if (activeSessions.has(sessionId) && !res.headersSent) {
                res.status(408).json({ error: 'QR generation timeout' });
            }
        }, 30000);

    } catch (error) {
        removeFile(tempDir);
        res.status(500).json({ error: 'Failed to generate QR code' });
    }
});

// Pairing Code Endpoint
router.get('/code', async (req, res) => {
    const { number } = req.query;
    
    if (!number) {
        return res.status(400).json({ error: 'Phone number required' });
    }

    const sessionId = generateId();
    const tempDir = path.join(__dirname, 'temp', sessionId);
    fs.mkdirSync(tempDir, { recursive: true });

    try {
        const { state, saveCreds } = await useMultiFileAuthState(tempDir);

        const sock = makeWASocket({
            auth: {
                creds: state.creds,
                keys: makeCacheableSignalKeyStore(state.keys, pino({ level: "fatal" })),
            },
            printQRInTerminal: false,
            logger: pino({ level: "fatal" }),
            browser: Browsers.macOS("Safari")
        });

        sock.ev.on('creds.update', saveCreds);

        sock.ev.on("connection.update", async (update) => {
            const { connection } = update;

            if (connection === "open") {
                await delay(2000);
                const credsPath = path.join(tempDir, 'creds.json');
                if (fs.existsSync(credsPath)) {
                    try {
                        const sessionData = fs.readFileSync(credsPath, 'utf8');
                        const base64Session = Buffer.from(sessionData).toString('base64');
                        const infinitySession = "INFINITY_" + base64Session;

                        const message = `🔐 *YOUR WHATSAPP SESSION ID* - INFINITE-XMD

*Session ID:*
\`\`\`
${infinitySession}
\`\`\`

*Generated:* ${new Date().toLocaleString()}

💻 Generated by Bevan Society`;

                        await sock.sendMessage(sock.user.id, { text: message });
                    } catch (error) {
                        console.error('Error:', error);
                    }
                }

                await delay(1000);
                await sock.ws.close();
                removeFile(tempDir);
                activeSessions.delete(sessionId);
            }
        });

        if (!sock.authState.creds.registered) {
            await delay(1000);
            const cleanNumber = formatPhoneNumber(number);
            const pairingCode = await sock.requestPairingCode(cleanNumber);
            
            activeSessions.set(sessionId, { sock, tempDir, createdAt: Date.now() });
            
            res.json({ success: true, code: pairingCode, sessionId: sessionId });
        }

    } catch (error) {
        removeFile(tempDir);
        res.status(500).json({ error: 'Failed to generate pairing code' });
    }
});

// Cleanup
setInterval(() => {
    const now = Date.now();
    for (const [sessionId, session] of activeSessions.entries()) {
        if (now - session.createdAt > 300000) {
            if (session.sock) session.sock.ws.close();
            removeFile(session.tempDir);
            activeSessions.delete(sessionId);
        }
    }
}, 60000);

module.exports = router;
