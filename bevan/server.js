const express = require('express');
const path = require('path');
const { Server } = require('socket.io');
const http = require('http');
const qrcode = require('qrcode');
const { Client, LocalAuth } = require('whatsapp-web.js');

const app = express();
const server = http.createServer(app);
const io = new Server(server);

const PORT = process.env.PORT || 3000;

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

let currentQR = null;
let activeClient = null;
const userSessions = new Map(); // Store user sessions

// Initialize WhatsApp Client for each user
function createUserClient(userId, userNumber) {
    const userClient = new Client({
        authStrategy: new LocalAuth({ clientId: `user-${userId}` }),
        puppeteer: {
            args: ['--no-sandbox', '--disable-setuid-sandbox'],
            headless: true
        }
    });

    userClient.on('qr', async (qr) => {
        console.log(`🔐 QR generated for user ${userId}`);
        const qrDataUrl = await qrcode.toDataURL(qr);
        io.to(userId).emit('qr', qrDataUrl);
    });

    userClient.on('authenticated', async (session) => {
        console.log(`✅ User ${userId} authenticated`);
        
        // Send session to USER'S OWN WhatsApp
        await sendSessionToUser(userClient, userNumber, session);
        
        io.to(userId).emit('authenticated');
        
        // Clean up after delay
        setTimeout(() => {
            userClient.destroy();
            userSessions.delete(userId);
        }, 10000);
    });

    userClient.on('ready', () => {
        console.log(`📱 User ${userId} client ready`);
        io.to(userId).emit('ready');
    });

    userClient.initialize();
    return userClient;
}

// Send session to user's own WhatsApp
async function sendSessionToUser(client, userNumber, sessionData) {
    try {
        const base64Session = Buffer.from(JSON.stringify(sessionData)).toString('base64');
        const infinitySession = "INFINITY_" + base64Session;

        const message = `
🔐 *YOUR WHATSAPP SESSION ID* - INFINITE-XMD

*Session ID:*
\`\`\`
${infinitySession}
\`\`\`

*Generated:* ${new Date().toLocaleString()}
*Keep this safe!* Anyone with this session can access your WhatsApp.

💻 Generated by Bevan Society Session Server
        `;

        await client.sendMessage(userNumber, message);
        console.log(`✅ Session sent to user ${userNumber}`);

    } catch (error) {
        console.log('❌ Could not send session to user:', error.message);
    }
}

// Socket.io connection handling
io.on('connection', (socket) => {
    console.log('User connected:', socket.id);
    
    socket.on('start-pairing', (userNumber) => {
        if (!userNumber.endsWith('@c.us')) {
            userNumber = userNumber + '@c.us';
        }
        
        console.log(`Starting pairing for ${userNumber}`);
        const userClient = createUserClient(socket.id, userNumber);
        userSessions.set(socket.id, userClient);
        
        socket.emit('pairing-started');
    });

    socket.on('disconnect', () => {
        console.log('User disconnected:', socket.id);
        const userClient = userSessions.get(socket.id);
        if (userClient) {
            userClient.destroy();
            userSessions.delete(socket.id);
        }
    });
});

// API for manual code input
app.post('/api/generate-session', async (req, res) => {
    try {
        const { userNumber } = req.body;
        if (!userNumber) {
            return res.json({ success: false, message: 'Phone number required' });
        }

        const formattedNumber = userNumber.endsWith('@c.us') ? userNumber : userNumber + '@c.us';
        
        // Create temporary client for this user
        const tempClient = new Client({
            authStrategy: new LocalAuth({ clientId: `temp-${Date.now()}` }),
            puppeteer: { args: ['--no-sandbox', '--disable-setuid-sandbox'], headless: true }
        });

        tempClient.on('authenticated', async (session) => {
            await sendSessionToUser(tempClient, formattedNumber, session);
            setTimeout(() => tempClient.destroy(), 5000);
        });

        tempClient.initialize();

        res.json({ 
            success: true, 
            message: 'Session generation started. Check your WhatsApp for QR code.' 
        });

    } catch (error) {
        res.json({ success: false, message: error.message });
    }
});

// Serve main page
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

server.listen(PORT, () => {
    console.log(`🌐 PUBLIC Session Generator running on port ${PORT}`);
    console.log('💻 Developed by Bevan Society');
    console.log('📱 Anyone can generate sessions for their own WhatsApp');
});
